#![allow(
	non_camel_case_types,
	unused,
	clippy::redundant_closure,
	clippy::useless_conversion,
	clippy::unit_arg,
	clippy::double_parens,
	non_snake_case,
	clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.

use crate::sentc::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_decode_jwt_impl(port_: MessagePort, jwt: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "decode_jwt",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_jwt = jwt.wire2api();
			move |task_callback| decode_jwt(api_jwt)
		},
	)
}
fn wire_check_user_identifier_available_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| check_user_identifier_available(api_base_url, api_auth_token, api_user_identifier)
		},
	)
}
fn wire_generate_user_register_data_impl(port_: MessagePort) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "generate_user_register_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || move |task_callback| generate_user_register_data(),
	)
}
fn wire_prepare_register_impl(port_: MessagePort, user_identifier: impl Wire2Api<String> + UnwindSafe, password: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| prepare_register(api_user_identifier, api_password)
		},
	)
}
fn wire_done_register_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_register(api_server_output)
		},
	)
}
fn wire_register_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| register(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}
fn wire_register_device_start_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	device_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| register_device_start(api_base_url, api_auth_token, api_device_identifier, api_password)
		},
	)
}
fn wire_done_register_device_start_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_register_device_start(api_server_output)
		},
	)
}
fn wire_register_device_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	server_output: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| register_device(api_base_url, api_auth_token, api_jwt, api_server_output)
		},
	)
}
fn wire_login_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| login(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}
fn wire_mfa_login_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	master_key_encryption: impl Wire2Api<String> + UnwindSafe,
	auth_key: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	token: impl Wire2Api<String> + UnwindSafe,
	recovery: impl Wire2Api<bool> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "mfa_login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_master_key_encryption = master_key_encryption.wire2api();
			let api_auth_key = auth_key.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_token = token.wire2api();
			let api_recovery = recovery.wire2api();
			move |task_callback| {
				mfa_login(
					api_base_url,
					api_auth_token,
					api_master_key_encryption,
					api_auth_key,
					api_user_identifier,
					api_token,
					api_recovery,
				)
			}
		},
	)
}
fn wire_refresh_jwt_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	refresh_token: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "refresh_jwt",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_refresh_token = refresh_token.wire2api();
			move |task_callback| refresh_jwt(api_base_url, api_auth_token, api_jwt, api_refresh_token)
		},
	)
}
fn wire_init_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	refresh_token: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "init_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_refresh_token = refresh_token.wire2api();
			move |task_callback| init_user(api_base_url, api_auth_token, api_jwt, api_refresh_token)
		},
	)
}
fn wire_get_user_devices_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_id: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "get_user_devices",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			move |task_callback| {
				get_user_devices(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_id,
				)
			}
		},
	)
}
fn wire_change_password_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	old_password: impl Wire2Api<String> + UnwindSafe,
	new_password: impl Wire2Api<String> + UnwindSafe,
	mfa_token: impl Wire2Api<Option<String>> + UnwindSafe,
	mfa_recovery: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "change_password",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_old_password = old_password.wire2api();
			let api_new_password = new_password.wire2api();
			let api_mfa_token = mfa_token.wire2api();
			let api_mfa_recovery = mfa_recovery.wire2api();
			move |task_callback| {
				change_password(
					api_base_url,
					api_auth_token,
					api_user_identifier,
					api_old_password,
					api_new_password,
					api_mfa_token,
					api_mfa_recovery,
				)
			}
		},
	)
}
fn wire_delete_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
	mfa_token: impl Wire2Api<Option<String>> + UnwindSafe,
	mfa_recovery: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "delete_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			let api_mfa_token = mfa_token.wire2api();
			let api_mfa_recovery = mfa_recovery.wire2api();
			move |task_callback| {
				delete_user(
					api_base_url,
					api_auth_token,
					api_user_identifier,
					api_password,
					api_mfa_token,
					api_mfa_recovery,
				)
			}
		},
	)
}
fn wire_delete_device_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	device_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
	device_id: impl Wire2Api<String> + UnwindSafe,
	mfa_token: impl Wire2Api<Option<String>> + UnwindSafe,
	mfa_recovery: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "delete_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			let api_device_id = device_id.wire2api();
			let api_mfa_token = mfa_token.wire2api();
			let api_mfa_recovery = mfa_recovery.wire2api();
			move |task_callback| {
				delete_device(
					api_base_url,
					api_auth_token,
					api_device_identifier,
					api_password,
					api_device_id,
					api_mfa_token,
					api_mfa_recovery,
				)
			}
		},
	)
}
fn wire_update_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "update_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| update_user(api_base_url, api_auth_token, api_jwt, api_user_identifier)
		},
	)
}
fn wire_group_create_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_create_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| group_create_group(api_base_url, api_auth_token, api_jwt, api_group_as_member)
		},
	)
}
fn wire_group_create_child_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	parent_id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_create_child_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_parent_id = parent_id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_create_child_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_parent_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_create_connected_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	connected_group_id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_create_connected_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_connected_group_id = connected_group_id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_create_connected_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_connected_group_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_extract_group_data_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_extract_group_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| group_extract_group_data(api_server_output)
		},
	)
}
fn wire_group_get_group_data_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_group_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| group_get_group_data(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_get_member_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_member",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_member(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_last_fetched_time,
					api_last_fetched_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_group_updates_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_group_updates",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| group_get_group_updates(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_get_all_first_level_children_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_all_first_level_children",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_all_first_level_children(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_groups_for_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_groups_for_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_id = group_id.wire2api();
			move |task_callback| {
				group_get_groups_for_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_id,
				)
			}
		},
	)
}
fn wire_group_invite_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	rank: impl Wire2Api<Option<i32>> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	auto_invite: impl Wire2Api<bool> + UnwindSafe,
	group_invite: impl Wire2Api<bool> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_invite_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_auto_invite = auto_invite.wire2api();
			let api_group_invite = group_invite.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_invite_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_rank,
					api_admin_rank,
					api_auto_invite,
					api_group_invite,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_invites_for_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_invites_for_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_invites_for_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_accept_invite_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_accept_invite",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_accept_invite(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_reject_invite_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_reject_invite",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_reject_invite(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_sent_join_req_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_sent_join_req_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_sent_join_req_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_sent_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_sent_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_sent_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_delete_sent_join_req_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	join_req_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_delete_sent_join_req_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_join_req_group_id = join_req_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_delete_sent_join_req_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_join_req_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_delete_sent_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	join_req_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_delete_sent_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_join_req_group_id = join_req_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_delete_sent_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_join_req_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_join_reqs_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_get_join_reqs",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_join_reqs(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_last_fetched_time,
					api_last_fetched_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_reject_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	rejected_user_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_reject_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_rejected_user_id = rejected_user_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_reject_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_rejected_user_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_accept_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	rank: impl Wire2Api<Option<i32>> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_accept_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_accept_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_rank,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_stop_group_invites_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_stop_group_invites",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_stop_group_invites(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_leave_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "leave_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| leave_group(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_prepare_update_rank_impl(
	port_: MessagePort,
	user_id: impl Wire2Api<String> + UnwindSafe,
	rank: impl Wire2Api<i32> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_prepare_update_rank",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_id = user_id.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			move |task_callback| group_prepare_update_rank(api_user_id, api_rank, api_admin_rank)
		},
	)
}
fn wire_group_update_rank_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	rank: impl Wire2Api<i32> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_update_rank",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_update_rank(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_rank,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_kick_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_kick_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_kick_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_delete_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "group_delete_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_delete_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
	fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
	*mut S: Wire2Api<T>,
{
	fn wire2api(self) -> Option<T> {
		(!self.is_null()).then(|| self.wire2api())
	}
}

impl Wire2Api<bool> for bool {
	fn wire2api(self) -> bool {
		self
	}
}

impl Wire2Api<i32> for i32 {
	fn wire2api(self) -> i32 {
		self
	}
}

impl Wire2Api<u8> for u8 {
	fn wire2api(self) -> u8 {
		self
	}
}

// Section: impl IntoDart

impl support::IntoDart for Claims {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.aud.into_dart(),
			self.sub.into_dart(),
			self.exp.into_dart(),
			self.iat.into_dart(),
			self.fresh.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for Claims {}

impl support::IntoDart for DeviceKeyData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.private_key.into_dart(),
			self.public_key.into_dart(),
			self.sign_key.into_dart(),
			self.verify_key.into_dart(),
			self.exported_public_key.into_dart(),
			self.exported_verify_key.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for DeviceKeyData {}

impl support::IntoDart for GeneratedRegisterData {
	fn into_dart(self) -> support::DartAbi {
		vec![self.identifier.into_dart(), self.password.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GeneratedRegisterData {}

impl support::IntoDart for GroupChildrenList {
	fn into_dart(self) -> support::DartAbi {
		vec![self.group_id.into_dart(), self.time.into_dart(), self.parent.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupChildrenList {}

impl support::IntoDart for GroupInviteReqList {
	fn into_dart(self) -> support::DartAbi {
		vec![self.group_id.into_dart(), self.time.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupInviteReqList {}

impl support::IntoDart for GroupJoinReqList {
	fn into_dart(self) -> support::DartAbi {
		vec![self.user_id.into_dart(), self.time.into_dart(), self.user_type.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupJoinReqList {}

impl support::IntoDart for GroupOutDataLightExport {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.group_id.into_dart(),
			self.parent_group_id.into_dart(),
			self.rank.into_dart(),
			self.created_time.into_dart(),
			self.joined_time.into_dart(),
			self.access_by_group_as_member.into_dart(),
			self.access_by_parent_group.into_dart(),
			self.is_connected_group.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupOutDataLightExport {}

impl support::IntoDart for GroupUserListItem {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.user_id.into_dart(),
			self.rank.into_dart(),
			self.joined_time.into_dart(),
			self.user_type.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupUserListItem {}

impl support::IntoDart for ListGroups {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.group_id.into_dart(),
			self.time.into_dart(),
			self.joined_time.into_dart(),
			self.rank.into_dart(),
			self.parent.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for ListGroups {}

impl support::IntoDart for PrepareLoginOtpOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.master_key.into_dart(), self.auth_key.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for PrepareLoginOtpOutput {}

impl support::IntoDart for UserDataExport {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.jwt.into_dart(),
			self.user_id.into_dart(),
			self.device_id.into_dart(),
			self.refresh_token.into_dart(),
			self.device_keys.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserDataExport {}

impl support::IntoDart for UserDeviceList {
	fn into_dart(self) -> support::DartAbi {
		vec![self.device_id.into_dart(), self.time.into_dart(), self.device_identifier.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserDeviceList {}

impl support::IntoDart for UserInitServerOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.jwt.into_dart(), self.invites.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserInitServerOutput {}

impl support::IntoDart for UserLoginOut {
	fn into_dart(self) -> support::DartAbi {
		vec![self.user_data.into_dart(), self.mfa.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserLoginOut {}

// Section: executor

support::lazy_static! {
	pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
