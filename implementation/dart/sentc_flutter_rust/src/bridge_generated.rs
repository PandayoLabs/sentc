#![allow(
	non_camel_case_types,
	unused,
	clippy::redundant_closure,
	clippy::useless_conversion,
	clippy::unit_arg,
	clippy::double_parens,
	non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::sentc::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_check_user_identifier_available(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| check_user_identifier_available(api_base_url, api_auth_token, api_user_identifier)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_check_user_identifier_available(port_: i64, user_identifier: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| prepare_check_user_identifier_available(api_user_identifier)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_done_check_user_identifier_available(port_: i64, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_check_user_identifier_available(api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_generate_user_register_data(port_: i64) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "generate_user_register_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || move |task_callback| generate_user_register_data(),
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_register(port_: i64, user_identifier: *mut wire_uint_8_list, password: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| prepare_register(api_user_identifier, api_password)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_done_register(port_: i64, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_register(api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_register(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
	password: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| register(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_register_device_start(port_: i64, device_identifier: *mut wire_uint_8_list, password: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| prepare_register_device_start(api_device_identifier, api_password)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_done_register_device_start(port_: i64, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_register_device_start(api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_register_device_start(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	device_identifier: *mut wire_uint_8_list,
	password: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| register_device_start(api_base_url, api_auth_token, api_device_identifier, api_password)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_register_device(port_: i64, server_output: *mut wire_uint_8_list, user_keys: *mut wire_uint_8_list, key_count: i32) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_register_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			let api_user_keys = user_keys.wire2api();
			let api_key_count = key_count.wire2api();
			move |task_callback| prepare_register_device(api_server_output, api_user_keys, api_key_count)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_register_device(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	server_output: *mut wire_uint_8_list,
	key_count: i32,
	user_keys: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_server_output = server_output.wire2api();
			let api_key_count = key_count.wire2api();
			let api_user_keys = user_keys.wire2api();
			move |task_callback| {
				register_device(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_server_output,
					api_key_count,
					api_user_keys,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_device_key_session_upload(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	session_id: *mut wire_uint_8_list,
	user_public_key: *mut wire_uint_8_list,
	group_keys: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_device_key_session_upload",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_session_id = session_id.wire2api();
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			move |task_callback| {
				user_device_key_session_upload(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_session_id,
					api_user_public_key,
					api_group_keys,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_login_start(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_login_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| prepare_login_start(api_base_url, api_auth_token, api_user_identifier)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_login(
	port_: i64,
	user_identifier: *mut wire_uint_8_list,
	password: *mut wire_uint_8_list,
	server_output: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| prepare_login(api_user_identifier, api_password, api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_done_login(port_: i64, master_key_encryption: *mut wire_uint_8_list, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_master_key_encryption = master_key_encryption.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| done_login(api_master_key_encryption, api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_login(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
	password: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| login(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_done_fetch_user_key(port_: i64, private_key: *mut wire_uint_8_list, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_fetch_user_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| done_fetch_user_key(api_private_key, api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_fetch_user_key(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	key_id: *mut wire_uint_8_list,
	private_key: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "fetch_user_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_key_id = key_id.wire2api();
			let api_private_key = private_key.wire2api();
			move |task_callback| fetch_user_key(api_base_url, api_auth_token, api_jwt, api_key_id, api_private_key)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_refresh_jwt(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	refresh_token: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "refresh_jwt",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_refresh_token = refresh_token.wire2api();
			move |task_callback| refresh_jwt(api_base_url, api_auth_token, api_jwt, api_refresh_token)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_init_user(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	refresh_token: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "init_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_refresh_token = refresh_token.wire2api();
			move |task_callback| init_user(api_base_url, api_auth_token, api_jwt, api_refresh_token)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_get_user_devices(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	last_fetched_time: *mut wire_uint_8_list,
	last_fetched_id: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "get_user_devices",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			move |task_callback| {
				get_user_devices(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_id,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_reset_password(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	new_password: *mut wire_uint_8_list,
	decrypted_private_key: *mut wire_uint_8_list,
	decrypted_sign_key: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "reset_password",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_new_password = new_password.wire2api();
			let api_decrypted_private_key = decrypted_private_key.wire2api();
			let api_decrypted_sign_key = decrypted_sign_key.wire2api();
			move |task_callback| {
				reset_password(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_new_password,
					api_decrypted_private_key,
					api_decrypted_sign_key,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_change_password(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
	old_password: *mut wire_uint_8_list,
	new_password: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "change_password",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_old_password = old_password.wire2api();
			let api_new_password = new_password.wire2api();
			move |task_callback| {
				change_password(
					api_base_url,
					api_auth_token,
					api_user_identifier,
					api_old_password,
					api_new_password,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_delete_user(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
	password: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "delete_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| delete_user(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_delete_device(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	device_identifier: *mut wire_uint_8_list,
	password: *mut wire_uint_8_list,
	device_id: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "delete_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			let api_device_id = device_id.wire2api();
			move |task_callback| {
				delete_device(
					api_base_url,
					api_auth_token,
					api_device_identifier,
					api_password,
					api_device_id,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_update_user(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	user_identifier: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "update_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| update_user(api_base_url, api_auth_token, api_jwt, api_user_identifier)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_fetch_public_key(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_id: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_fetch_public_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_id = user_id.wire2api();
			move |task_callback| user_fetch_public_key(api_base_url, api_auth_token, api_user_id)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_fetch_verify_key(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	user_id: *mut wire_uint_8_list,
	verify_key_id: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_fetch_verify_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_id = user_id.wire2api();
			let api_verify_key_id = verify_key_id.wire2api();
			move |task_callback| user_fetch_verify_key(api_base_url, api_auth_token, api_user_id, api_verify_key_id)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_key_rotation(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	public_device_key: *mut wire_uint_8_list,
	pre_user_key: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_public_device_key = public_device_key.wire2api();
			let api_pre_user_key = pre_user_key.wire2api();
			move |task_callback| {
				user_key_rotation(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_public_device_key,
					api_pre_user_key,
				)
			}
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_pre_done_key_rotation(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_pre_done_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			move |task_callback| user_pre_done_key_rotation(api_base_url, api_auth_token, api_jwt)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_get_done_key_rotation_server_input(port_: i64, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_get_done_key_rotation_server_input",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| user_get_done_key_rotation_server_input(api_server_output)
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_user_finish_key_rotation(
	port_: i64,
	base_url: *mut wire_uint_8_list,
	auth_token: *mut wire_uint_8_list,
	jwt: *mut wire_uint_8_list,
	server_output: *mut wire_uint_8_list,
	pre_group_key: *mut wire_uint_8_list,
	public_key: *mut wire_uint_8_list,
	private_key: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "user_finish_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_server_output = server_output.wire2api();
			let api_pre_group_key = pre_group_key.wire2api();
			let api_public_key = public_key.wire2api();
			let api_private_key = private_key.wire2api();
			move |task_callback| {
				user_finish_key_rotation(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_server_output,
					api_pre_group_key,
					api_public_key,
					api_private_key,
				)
			}
		},
	)
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
	ptr: *mut u8,
	len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
	let ans = wire_uint_8_list {
		ptr: support::new_leak_vec_ptr(Default::default(), len),
		len,
	};
	support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
	fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
	*mut S: Wire2Api<T>,
{
	fn wire2api(self) -> Option<T> {
		if self.is_null() {
			None
		} else {
			Some(self.wire2api())
		}
	}
}

impl Wire2Api<String> for *mut wire_uint_8_list {
	fn wire2api(self) -> String {
		let vec: Vec<u8> = self.wire2api();
		String::from_utf8_lossy(&vec).into_owned()
	}
}

impl Wire2Api<i32> for i32 {
	fn wire2api(self) -> i32 {
		self
	}
}

impl Wire2Api<u8> for u8 {
	fn wire2api(self) -> u8 {
		self
	}
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
	fn wire2api(self) -> Vec<u8> {
		unsafe {
			let wrap = support::box_from_leak_ptr(self);
			support::vec_from_leak_ptr(wrap.ptr, wrap.len)
		}
	}
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
	fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
	fn new_with_null_ptr() -> Self {
		std::ptr::null_mut()
	}
}

// Section: impl IntoDart

impl support::IntoDart for DeviceKeyData {
	fn into_dart(self) -> support::DartCObject {
		vec![
			self.private_key.into_dart(),
			self.public_key.into_dart(),
			self.sign_key.into_dart(),
			self.verify_key.into_dart(),
			self.exported_public_key.into_dart(),
			self.exported_verify_key.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for DeviceKeyData {}

impl support::IntoDart for GeneratedRegisterData {
	fn into_dart(self) -> support::DartCObject {
		vec![self.identifier.into_dart(), self.password.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GeneratedRegisterData {}

impl support::IntoDart for GroupInviteReqList {
	fn into_dart(self) -> support::DartCObject {
		vec![self.group_id.into_dart(), self.time.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupInviteReqList {}

impl support::IntoDart for KeyRotationGetOut {
	fn into_dart(self) -> support::DartCObject {
		vec![
			self.pre_group_key_id.into_dart(),
			self.new_group_key_id.into_dart(),
			self.encrypted_eph_key_key_id.into_dart(),
			self.server_output.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for KeyRotationGetOut {}

impl support::IntoDart for KeyRotationInput {
	fn into_dart(self) -> support::DartCObject {
		vec![
			self.encrypted_ephemeral_key_by_group_key_and_public_key
				.into_dart(),
			self.encrypted_group_key_by_ephemeral.into_dart(),
			self.ephemeral_alg.into_dart(),
			self.encrypted_eph_key_key_id.into_dart(),
			self.previous_group_key_id.into_dart(),
			self.time.into_dart(),
			self.new_group_key_id.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for KeyRotationInput {}

impl support::IntoDart for PreRegisterDeviceData {
	fn into_dart(self) -> support::DartCObject {
		vec![self.input.into_dart(), self.exported_public_key.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for PreRegisterDeviceData {}

impl support::IntoDart for PrepareLoginOutput {
	fn into_dart(self) -> support::DartCObject {
		vec![self.auth_key.into_dart(), self.master_key_encryption_key.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for PrepareLoginOutput {}

impl support::IntoDart for RegisterDeviceData {
	fn into_dart(self) -> support::DartCObject {
		vec![self.session_id.into_dart(), self.exported_public_key.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for RegisterDeviceData {}

impl support::IntoDart for UserData {
	fn into_dart(self) -> support::DartCObject {
		vec![
			self.jwt.into_dart(),
			self.user_id.into_dart(),
			self.device_id.into_dart(),
			self.refresh_token.into_dart(),
			self.keys.into_dart(),
			self.user_keys.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserData {}

impl support::IntoDart for UserDeviceList {
	fn into_dart(self) -> support::DartCObject {
		vec![self.device_id.into_dart(), self.time.into_dart(), self.device_identifier.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserDeviceList {}

impl support::IntoDart for UserInitServerOutput {
	fn into_dart(self) -> support::DartCObject {
		vec![self.jwt.into_dart(), self.invites.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserInitServerOutput {}

impl support::IntoDart for UserKeyData {
	fn into_dart(self) -> support::DartCObject {
		vec![
			self.private_key.into_dart(),
			self.public_key.into_dart(),
			self.group_key.into_dart(),
			self.time.into_dart(),
			self.group_key_id.into_dart(),
			self.sign_key.into_dart(),
			self.verify_key.into_dart(),
			self.exported_public_key.into_dart(),
			self.exported_verify_key.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserKeyData {}

impl support::IntoDart for UserPublicKeyData {
	fn into_dart(self) -> support::DartCObject {
		vec![self.public_key.into_dart(), self.public_key_id.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserPublicKeyData {}

// Section: executor

support::lazy_static! {
	pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
	unsafe {
		let _ = support::vec_from_leak_ptr(val.ptr, val.len);
	}
}
