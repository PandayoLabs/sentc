#![allow(
	non_camel_case_types,
	unused,
	clippy::redundant_closure,
	clippy::useless_conversion,
	clippy::unit_arg,
	clippy::double_parens,
	non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::sendclose::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_register_test_full(port_: i64) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register_test_full",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || move |task_callback| Ok(register_test_full()),
	)
}

#[no_mangle]
pub extern "C" fn wire_register(port_: i64, password: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_password = password.wire2api();
			move |task_callback| Ok(register(api_password))
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_prepare_login(
	port_: i64,
	password: *mut wire_uint_8_list,
	salt_string: *mut wire_uint_8_list,
	derived_encryption_key_alg: *mut wire_uint_8_list,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "prepare_login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_password = password.wire2api();
			let api_salt_string = salt_string.wire2api();
			let api_derived_encryption_key_alg = derived_encryption_key_alg.wire2api();
			move |task_callback| Ok(prepare_login(api_password, api_salt_string, api_derived_encryption_key_alg))
		},
	)
}

#[no_mangle]
pub extern "C" fn wire_done_login(port_: i64, master_key_encryption: *mut wire_uint_8_list, server_output: *mut wire_uint_8_list) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap(
		WrapInfo {
			debug_name: "done_login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_master_key_encryption = master_key_encryption.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| Ok(done_login(api_master_key_encryption, api_server_output))
		},
	)
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
	ptr: *mut u8,
	len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
	let ans = wire_uint_8_list {
		ptr: support::new_leak_vec_ptr(Default::default(), len),
		len,
	};
	support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
	fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
	*mut S: Wire2Api<T>,
{
	fn wire2api(self) -> Option<T> {
		if self.is_null() {
			None
		} else {
			Some(self.wire2api())
		}
	}
}

impl Wire2Api<String> for *mut wire_uint_8_list {
	fn wire2api(self) -> String {
		let vec: Vec<u8> = self.wire2api();
		String::from_utf8_lossy(&vec).into_owned()
	}
}

impl Wire2Api<u8> for u8 {
	fn wire2api(self) -> u8 {
		self
	}
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
	fn wire2api(self) -> Vec<u8> {
		unsafe {
			let wrap = support::box_from_leak_ptr(self);
			support::vec_from_leak_ptr(wrap.ptr, wrap.len)
		}
	}
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
	fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
	fn new_with_null_ptr() -> Self {
		std::ptr::null_mut()
	}
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
	pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
	unsafe {
		let _ = support::vec_from_leak_ptr(val.ptr, val.len);
	}
}
